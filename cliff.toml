#
# git-cliff -o CHANGELOG.md
#
# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# # template for the changelog footer
# footer = """
# <!-- generated by git-cliff -->
# """
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove PR labels from commits
  { pattern = '\(#([0-9]+)\)', replace = "" },
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = '^chore\(release\): prepare for', skip = true },
  { message = '^chore\(pr\)', skip = true },
  { message = '^chore\(pull\)', skip = true },
  { message = '^chore: (release|Release)', skip = true },
  { message = '^Release', skip = true },
  { message = "^Merge commit", skip = true },
  { body = '.*security', group = "<!-- 08 -->🛡️ Security" },
  { message = '^(chore|fix)\(deps\):', group = "<!-- 99 -->📦️ Dependency Updates", scope = "" },
  { message = '^feat', group = "<!-- 00 -->🚀 Features" },
  { message = '^fix', group = "<!-- 01 -->🐛 Bug Fixes" },
  { message = '^refactor', group = "<!-- 02 -->🚜 Refactor" },
  { message = '^doc', group = "<!-- 03 -->📚 Documentation" },
  { message = '^style', group = "<!-- 05 -->🎨 Styling" },
  { message = '^perf', group = "<!-- 04 -->⚡ Performance" },
  { message = '^test', group = "<!-- 06 -->🧪 Testing" },
  { message = '^revert', group = "<!-- 09 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
# tag_pattern = '^v\d+\.\d+\.\d+$'
# regex for skipping tags
# skip_tags = '^v(1|2023|2024\.0|2024\.11\.27)'
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
